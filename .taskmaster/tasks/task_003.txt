# Task ID: 3
# Title: Implement WebSocket Client Connection with Vue 3 Composable
# Status: pending
# Dependencies: 1, 2
# Priority: medium
# Description: Create WebSocket client functionality using Vue 3 Composition API with TypeScript and reactive state management
# Details:
Create a composable (useWebSocket.ts) in composables directory using native WebSocket API. Define TypeScript interfaces for message types and connection states. Use ref() for WebSocket instance and reactive() for connection state (status: 'connecting' | 'connected' | 'disconnected'). Implement connection logic to ws://localhost:8080/ws with reconnection capability using exponential backoff. Create typed methods: connect(), disconnect(), send(message: MessageType), with proper error handling. Add WebSocket event handlers (onopen, onclose, onerror, onmessage) updating reactive state. Implement auto-reconnection logic with configurable max attempts. Export composable with full TypeScript types. In App.vue, use the composable with <script setup lang="ts">: const { status, connect, send } = useWebSocket(). Call connect() in onMounted lifecycle hook. Display connection status using shadcn-vue Badge component with dynamic styling based on status.

# Test Strategy:
Start both backend and frontend servers. Verify TypeScript compilation has no errors. Check browser console for successful WebSocket connection. Test sending typed messages and verify they're echoed back. Stop backend server and verify reconnection attempts with exponential backoff. Restart backend and confirm automatic reconnection. Verify reactive status updates trigger UI changes in the Badge component.

# Subtasks:
## 1. Create WebSocket composable with TypeScript interfaces [pending]
### Dependencies: None
### Description: Create a Vue 3 composable for WebSocket connection management with proper TypeScript typing
### Details:
Create `useWebSocket.ts` composable in the composables directory. Define TypeScript interfaces for WebSocket message types, connection options, and state. Include generic type parameters for message payload types. Set up the basic composable structure with reactive state variables.

## 2. Implement WebSocket connection lifecycle methods [pending]
### Dependencies: 3.1
### Description: Add connect, disconnect, and connection state management to the WebSocket composable
### Details:
Implement `connect()` method with WebSocket initialization and event listeners. Add `disconnect()` method with proper cleanup. Create reactive state for connection status (connecting, connected, disconnected, error). Handle WebSocket open, close, and error events.

## 3. Add automatic reconnection with exponential backoff [pending]
### Dependencies: 3.2
### Description: Implement reconnection logic with configurable retry attempts and exponential backoff strategy
### Details:
Create reconnection mechanism that triggers on unexpected disconnections. Implement exponential backoff algorithm with configurable base delay and max attempts. Add jitter to prevent thundering herd. Provide manual reconnect method and ability to cancel reconnection attempts.

## 4. Build message queue and handler system [pending]
### Dependencies: 3.2
### Description: Create a robust message handling system with queuing for offline messages
### Details:
Implement message queue to store messages when disconnected. Add `send()` method with automatic queuing when offline. Create message handler registration system with event emitter pattern. Add JSON parsing/stringifying with error handling. Implement message acknowledgment tracking if needed.

## 5. Create reactive state management for connection metrics [pending]
### Dependencies: 3.3, 3.4
### Description: Add comprehensive state tracking for connection status, latency, and message statistics
### Details:
Track connection state, reconnection attempts, and last connection time. Implement ping/pong for latency measurement. Add message counters for sent/received/failed messages. Create computed properties for connection health indicators. Use Vue 3's reactive/ref for all state variables.

## 6. Design connection status UI component with visual indicators [pending]
### Dependencies: 3.5
### Description: Create a reusable Vue component to display WebSocket connection status and controls
### Details:
Build `WebSocketStatus.vue` component showing connection state with color-coded indicators. Display reconnection attempts and countdown timer. Add manual reconnect button when disconnected. Show latency and message statistics in development mode. Use Tailwind CSS for styling with smooth transitions.

